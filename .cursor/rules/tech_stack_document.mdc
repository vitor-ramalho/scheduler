---
description: 
globs: 
alwaysApply: true
---
# Tech Stack Document

## Core Technologies

### Frontend Technologies
- **Framework**: Next.js 14+ with App Router
- **Language**: TypeScript 5.0+
- **State Management**: React Query (TanStack Query) for server state, Zustand for client state
- **Component Library**: Tailwind CSS with shadcn/ui components
- **Form Handling**: React Hook Form with Zod validation
- **Authentication**: JWT with secure HTTP-only cookies
- **Data Fetching**: SWR or React Query for data fetching and caching
- **Chart Libraries**: Recharts for analytics dashboards
- **Table Components**: TanStack Table (React Table)
- **Date Handling**: date-fns
- **Testing**: Jest + React Testing Library

### Backend Technologies
- **Runtime**: Node.js 20+
- **Framework**: Express.js with TypeScript
- **API Documentation**: Swagger/OpenAPI
- **Authentication**: Passport.js with JWT strategy
- **Validation**: Zod for schema validation
- **Testing**: Jest with Supertest
- **Logging**: Winston or Pino
- **Process Manager**: PM2 for production deployment

### Database
- **Primary Database**: PostgreSQL 16+
- **ORM/Query Builder**: Prisma 
- **Migrations**: Managed through ORM
- **Connection Pooling**: pgBouncer for production

### DevOps & Infrastructure
- **Containerization**: Docker with Docker Compose for development
- **CI/CD**: GitHub Actions
- **Cloud Provider**: AWS or similar
- **Monitoring**: Sentry for error tracking, Prometheus for metrics
- **Logging**: ELK Stack or Cloud-based logging solution

## Detailed Technology Specifications

### Frontend Architecture

#### Next.js Configuration
```typescript
// next.config.js
module.exports = {
  reactStrictMode: true,
  poweredByHeader: false,
  images: {
    domains: ['assets.yourdomain.com'],
  },
  experimental: {
    serverActions: true,
  },
}
```

#### TypeScript Configuration
```json
// tsconfig.json
{
  "compilerOptions": {
    "target": "es2020",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
```

#### State Management

**Server State with React Query**:
```typescript
// Example query hook
export function useProducts(filters: ProductFilters) {
  return useQuery({
    queryKey: ['products', filters],
    queryFn: () => fetchProducts(filters),
    staleTime: 5 * 60 * 1000, // 5 minutes
  });
}
```

**Client State with Zustand**:
```typescript
// Store for UI state
export const useUiStore = create<UiState>((set) => ({
  sidebarOpen: true,
  currentTheme: 'light',
  setSidebarOpen: (isOpen) => set({ sidebarOpen: isOpen }),
  toggleTheme: () => set((state) => ({ 
    currentTheme: state.currentTheme === 'light' ? 'dark' : 'light' 
  })),
}));
```

#### Component Structure
- `src/components/ui/` - Reusable UI components
- `src/components/[module]/` - Module-specific components
- `src/app/` - Next.js App Router pages and layouts
- `src/lib/` - Utilities and helper functions
- `src/hooks/` - Custom React hooks
- `src/types/` - TypeScript type definitions
- `src/api/` - API client functions

### Backend Architecture

#### Express.js Setup
```typescript
// src/index.ts
import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import compression from 'compression';
import { errorHandler } from './middleware/errorHandler';
import { apiRoutes } from './routes';

const app = express();

// Middleware
app.use(helmet());
app.use(cors({ origin: process.env.FRONTEND_URL, credentials: true }));
app.use(compression());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Routes
app.use('/api/v1', apiRoutes);

// Error handling
app.use(errorHandler);

// Start server
const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
```

#### API Route Structure
```
src/
  routes/
    index.ts                  # Route aggregation
    auth.routes.ts            # Authentication routes
    users.routes.ts           # User management
    organizations.routes.ts   # Organization management
    products.routes.ts        # Product management
    inventory.routes.ts       # Inventory operations
    sales.routes.ts           # Sales processing
    clients.routes.ts         # Client management
    reports.routes.ts         # Report generation
```

#### Controller Pattern
```typescript
// src/controllers/product.controller.ts
import { Request, Response, NextFunction } from 'express';
import { ProductService } from '../services/product.service';
import { CreateProductSchema } from '../schemas/product.schema';

export class ProductController {
  constructor(private productService: ProductService) {}

  async createProduct(req: Request, res: Response, next: NextFunction) {
    try {
      const tenantId = req.user.organizationId;
      const userId = req.user.id;
      
      // Validate request body
      const validatedData = CreateProductSchema.parse(req.body);
      
      // Call service
      const product = await this.productService.createProduct(
        tenantId,
        userId,
        validatedData
      );
      
      return res.status(201).json({ success: true, data: product });
    } catch (error) {
      next(error);
    }
  }
  
  // Other controller methods...
}
```

### Database Configuration

#### Prisma Schema Example
```prisma
// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  planId    String
  email     String   @unique
  phone     String?
  address   String?
  logo      String?
  settings  Json?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users     User[]
  products  Product[]
  inventory Inventory[]
  clients   Client[]
  sales     Sale[]

  // Plan relation
  plan      Plan     @relation(fields: [planId], references: [id])
}

model User {
  id             String   @id @default(uuid())
  organizationId String
  email          String
  passwordHash   String
  firstName      String
  lastName       String
  roleId         String
  active         Boolean  @default(true)
  lastLogin      DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id])
  role           Role         @relation(fields: [roleId], references: [id])

  // Composite unique to ensure email uniqueness within organization
  @@unique([organizationId, email])
}

// Additional models...
```

#### Database Migration Strategy
- Use Prisma Migrate for schema migrations
- Apply DB changes with CI/CD pipeline
- Version control migration scripts
- Include rollback procedures for critical migrations

### Security Implementations

#### Authentication Flow
```typescript
// src/middleware/auth.middleware.ts
import { Request, Response, NextFunction } from 'express';
import jwt from 'jsonwebtoken';
import { UnauthorizedError } from '../errors';

export function authenticate(req: Request, res: Response, next: NextFunction) {
  try {
    const token = req.cookies.token || req.headers.authorization?.split(' ')[1];
    
    if (!token) {
      throw new UnauthorizedError('Authentication required');
    }
    
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded;
    
    next();
  } catch (error) {
    next(new UnauthorizedError('Invalid or expired token'));
  }
}

export function authorize(permissions: string[]) {
  return (req: Request, res: Response, next: NextFunction) => {
    try {
      const userPermissions = req.user.permissions || [];
      
      const hasPermission = permissions.some(permission => 
        userPermissions.includes(permission)
      );
      
      if (!hasPermission) {
        throw new UnauthorizedError('Insufficient permissions');
      }
      
      next();
    } catch (error) {
      next(error);
    }
  };
}
```

#### Multi-Tenant Security
```typescript
// src/middleware/tenant.middleware.ts
import { Request, Response, NextFunction } from 'express';
import { ForbiddenError } from '../errors';

export function validateTenant(req: Request, res: Response, next: NextFunction) {
  try {
    const userTenantId = req.user.organizationId;
    const requestTenantId = req.params.tenantId || req.body.organizationId;
    
    // Skip check if no explicit tenant in request (will use JWT tenant)
    if (!requestTenantId) {
      return next();
    }
    
    // Ensure user can only access their own tenant data
    if (requestTenantId !== userTenantId) {
      throw new ForbiddenError('Access denied to requested tenant');
    }
    
    next();
  } catch (error) {
    next(error);
  }
}
```

### Testing Strategy

#### Unit Test Example
```typescript
// src/services/__tests__/product.service.test.ts
import { ProductService } from '../product.service';
import { ProductRepository } from '../../repositories/product.repository';
import { EventEmitter } from '../../events/eventEmitter';

// Mock repositories
jest.mock('../../repositories/product.repository');
jest.mock('../../events/eventEmitter');

describe('ProductService', () => {
  let productService: ProductService;
  let productRepo: jest.Mocked<ProductRepository>;
  let eventEmitter: jest.Mocked<EventEmitter>;
  
  const tenantId = 'test-tenant-id';
  const userId = 'test-user-id';
  
  beforeEach(() => {
    productRepo = new ProductRepository() as jest.Mocked<ProductRepository>;
    eventEmitter = new EventEmitter() as jest.Mocked<EventEmitter>;
    productService = new ProductService(productRepo, eventEmitter);
  });
  
  describe('createProduct', () => {
    it('should create a product and emit event', async () => {
      // Arrange
      const productData = {
        name: 'Test Product',
        sku: 'TP001',
        price: 10.99,
        cost: 5.50,
      };
      
      const createdProduct = { 
        id: 'new-product-id',
        ...productData,
        organizationId: tenantId,
        createdAt: new Date(),
        updatedAt: new Date(),
      };
      
      productRepo.create.mockResolvedValue(createdProduct);
      
      // Act
      const result = await productService.createProduct(tenantId, userId, productData);
      
      // Assert
      expect(productRepo.create).toHaveBeenCalledWith({
        ...productData,
        organizationId: tenantId,
      });
      
      expect(eventEmitter.emit).toHaveBeenCalledWith('product.created', {
        tenantId,
        payload: createdProduct,
        metadata: {
          userId,
          timestamp: expect.any(Date),
        },
      });
      
      expect(result).toEqual(createdProduct);
    });
  });
});
```

#### API Integration Test
```typescript
// src/routes/__tests__/product.routes.test.ts
import request from 'supertest';
import { app } from '../../app';
import { generateAuthToken } from '../../utils/auth';
import { prisma } from '../../lib/prisma';

describe('Product API Routes', () => {
  const testTenantId = 'test-org-id';
  const testUserId = 'test-user-id';
  
  let authToken: string;
  
  beforeAll(async () => {
    // Setup test data in DB
    await prisma.organization.create({
      data: {
        id: testTenantId,
        name: 'Test Org',
        planId: 'basic',
        email: 'test@example.com',
        active: true,
      },
    });
    
    // Generate token for testing
    authToken = generateAuthToken({
      id: testUserId,
      organizationId: testTenantId,
      permissions: ['create:products', 'read:products'],
    });
  });
  
  afterAll(async () => {
    // Clean up test data
    await prisma.organization.delete({
      where: { id: testTenantId },
    });
    
    await prisma.$disconnect();
  });
  
  describe('POST /api/v1/products', () => {
    it('should create a new product', async () => {
      // Arrange
      const productData = {
        name: 'Test Product',
        sku: 'TP001',
        price: 10.99,
        cost: 5.50,
      };
      
      // Act
      const response = await request(app)
        .post('/api/v1/products')
        .set('Authorization', `Bearer ${authToken}`)
        .send(productData);
      
      // Assert
      expect(response.status).toBe(201);
      expect(response.body.success).toBe(true);
      expect(response.body.data).toMatchObject({
        name: productData.name,
        sku: productData.sku,
        organizationId: testTenantId,
      });
    });
  });
});
```

### Package Dependencies

#### Frontend Dependencies
```json
{
  "dependencies": {
    "@hookform/resolvers": "^3.3.1",
    "@radix-ui/react-dialog": "^1.0.5",
    "@radix-ui/react-dropdown-menu": "^2.0.5",
    "@radix-ui/react-slot": "^1.0.2",
    "@tanstack/react-query": "^5.0.0",
    "@tanstack/react-table": "^8.10.7",
    "axios": "^1.5.1",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.0.0",
    "date-fns": "^2.30.0",
    "lucide-react": "^0.284.0",
    "next": "^14.0.1",
    "next-themes": "^0.2.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-hook-form": "^7.47.0",
    "recharts": "^2.8.0",
    "tailwind-merge": "^1.14.0",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.22.2",
    "zustand": "^4.4.3"
  },
  "devDependencies": {
    "@testing-library/jest-dom": "^6.1.3",
    "@testing-library/react": "^14.0.0",
    "@testing-library/user-event": "^14.5.1",
    "@types/node": "^20.8.2",
    "@types/react": "^18.2.24",
    "@types/react-dom": "^18.2.8",
    "autoprefixer": "^10.4.16",
    "eslint": "^8.50.0",
    "eslint-config-next": "^14.0.1",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "postcss": "^8.4.31",
    "tailwindcss": "^3.3.3",
    "typescript": "^5.2.2"
  }
}

```

#### Backend Dependencies
```json
{
  "dependencies": {
    "@prisma/client": "^5.4.1",
    "bcryptjs": "^2.4.3",
    "compression": "^1.7.4",
    "cookie-parser": "^1.4.6",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "express": "^4.18.2",
    "express-validator": "^7.0.1",
    "helmet": "^7.0.0",
    "jsonwebtoken": "^9.0.2",
    "multer": "^1.4.5-lts.1",
    "pg": "^8.11.3",
    "pino": "^8.15.3",
    "pino-http": "^8.5.0",
    "uuid": "^9.0.1",
    "zod": "^3.22.2"
  },
  "devDependencies": {
    "@types/bcryptjs": "^2.4.4",
    "@types/compression": "^1.7.3",
    "@types/cookie-parser": "^1.4.4",
    "@types/cors": "^2.8.14",
    "@types/express": "^4.17.18",
    "@types/jest": "^29.5.5",
    "@types/jsonwebtoken": "^9.0.3",
    "@types/multer": "^1.4.8",
    "@types/node": "^20.8.2",
    "@types/pg": "^8.10.3",
    "@types/supertest": "^2.0.13",
    "@types/uuid": "^9.0.4",
    "jest": "^29.7.0",
    "nodemon": "^3.0.1",
    "prisma": "^5.4.1",
    "supertest": "^6.3.3",
    "ts-jest": "^29.1.1",
    "ts-node": "^10.9.1",
    "typescript": "^5.2.2"
  }
}
```

## Data Flow & Integration

### Frontend-Backend Communication
- RESTful API endpoints for data operations
- Websocket connections for real-time updates (inventory changes, alerts)
- Server-sent events for notifications

### External Integrations
- **Payment Processing**: Stripe API
- **Email Service**: SendGrid or Amazon SES
- **File Storage**: Amazon S3 or equivalent
- **PDF Generation**: PDF.js or similar library
- **Barcode/QR Scanning**: QuaggaJS for web-based scanning

## Development Environment Setup

### Development Tools
- **IDE**: VS Code with recommended extensions
- **API Testing**: Postman or Insomnia
- **Git Workflow**: GitHub Flow (feature branches with PRs)
- **Code Linting**: ESLint with Prettier
- **Commit Linting**: Commitlint with Conventional Commits

### Local Development Setup
```
# Docker Compose for local development
version: '3.8'

services:
  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: stock_management
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

volumes:
  postgres_data:
  redis_data:
```

## Performance Considerations

### Frontend Optimization
- Code splitting with dynamic imports
- Static generation for marketing pages
- Server components for data-heavy pages
- Image optimization with Next.js Image component
- Memoization of expensive calculations
- Virtualization for long lists

### Backend Optimization
- Database indexing on frequently queried fields
- Query optimization
- Connection pooling
- Response caching
- Rate limiting for API endpoints
- Worker threads for CPU-intensive tasks

### Database Optimization
- Proper indexing strategy
- Regular VACUUM operations
- Partitioning for large tables
- Read replicas for reporting queries
- Query performance monitoring

## Scalability Planning

### Horizontal Scaling
- Stateless API design for easy replication
- Load balancing across multiple instances
- Database read replicas
- Caching layer with Redis

### Vertical Scaling
- Resource monitoring and right-sizing
- Database optimization for better resource utilization
- Efficient query design

### Multi-tenancy Considerations
- Database schema designed for tenant isolation
- Tenant-aware caching strategy
- Resource limits per tenant tier
- Tenant activity monitoring

## Monitoring & Observability

### Application Monitoring
- Request/response timing metrics
- Error rate tracking
- Endpoint usage statistics
- User session analytics

### Infrastructure Monitoring
- CPU, memory, disk usage
- Network traffic patterns
- Database connection pool utilization
- Queue lengths and processing times

### Logging Strategy
- Structured logging with correlation IDs
- Log levels (debug, info, warn, error)
- Tenant context in all logs
- PII data masking in logs

## Security Measures

### Data Protection
- Encryption at rest for sensitive data
- TLS for all connections
- Secure cookie handling
- Input validation on all endpoints
- Output encoding to prevent XSS

### Authentication Security
- Password hashing with bcrypt
- JWT token validation
- CSRF protection
- Rate limiting on authentication endpoints
- Account lockout policies

### Infrastructure Security
- Firewall rules limiting access
- Regular security updates
- Principle of least privilege for services
- Secrets management (no hardcoded secrets)